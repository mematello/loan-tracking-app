/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.marcusoliver.loan.tracker;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.TableRowSorter;


/**
 *
 * @author marcu
 */
public class TrackAPayment extends javax.swing.JFrame {
    

    public TrackAPayment() {
        initComponents();
        searchbar.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                searchTable();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                searchTable();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                searchTable();
            }
        });
        loadDataFromDatabase();
    }

    
    
    private void searchTable() {
        DefaultTableModel model = (DefaultTableModel) jtblTrackPayment.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        jtblTrackPayment.setRowSorter(sorter);

        String text = searchbar.getText();
        if (text.trim().isEmpty()) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
        }
    }
    
    private void loadDataFromDatabase() {
        DefaultTableModel model = (DefaultTableModel) jtblTrackPayment.getModel();
        model.setRowCount(0); // Clear any existing data

        String query = "SELECT borrower_name,amount_requested, start_date, due_date, status, type_of_loan, total_due, amount_paid FROM loantracktbl";

        try (Connection conn = DatabaseConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(query); ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                String borrowerName = rs.getString("borrower_name");
                String amountRequested = rs.getString("amount_requested");
                String startDate = rs.getString("start_date");
                String dueDate = rs.getString("due_date");
                String status = rs.getString("status");
                String loanType = rs.getString("type_of_loan");
                double interestRate = PayLoan.interestEquivalence(loanType);
                double totalDue = rs.getDouble("total_due");
                String amountPaid = rs.getString("amount_paid");

                model.addRow(new Object[]{borrowerName, amountRequested, startDate, dueDate, status, loanType, interestRate, totalDue, amountPaid});
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jbtnBack = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblTrackPayment = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jbtnName = new javax.swing.JButton();
        jbtnAmountRequested = new javax.swing.JButton();
        jbtnDate = new javax.swing.JButton();
        jbtnStatus = new javax.swing.JButton();
        loanType = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        searchbar = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(1280, 720));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(255, 255, 102));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 10));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Track a Payment");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel3.setText("Click a row to change status, click buttons to sort data");

        jbtnBack.setBackground(new java.awt.Color(204, 204, 204));
        jbtnBack.setText("Back");
        jbtnBack.setBorder(null);
        jbtnBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbtnBackMouseClicked(evt);
            }
        });
        jbtnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBackActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jtblTrackPayment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Borrower's Name", "Amount Requested", "Start Date", "Due Date", "Status", "Type of Loan", "Interest Rate", "Total Due", "Amount Paid"
            }
        ));
        jtblTrackPayment.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jtblTrackPayment.setShowGrid(false);
        jtblTrackPayment.getTableHeader().setReorderingAllowed(false);
        jtblTrackPayment.setUpdateSelectionOnSort(false);
        jtblTrackPayment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblTrackPaymentMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jtblTrackPayment);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Sort By:");

        jbtnName.setText("Name");
        jbtnName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnNameActionPerformed(evt);
            }
        });

        jbtnAmountRequested.setText("Amount Request");
        jbtnAmountRequested.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAmountRequestedActionPerformed(evt);
            }
        });

        jbtnDate.setText("Date");
        jbtnDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDateActionPerformed(evt);
            }
        });

        jbtnStatus.setText("Status");
        jbtnStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnStatusActionPerformed(evt);
            }
        });

        loanType.setText("Type of Loan");
        loanType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loanTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(loanType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtnName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtnAmountRequested, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtnDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtnStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbtnName, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbtnAmountRequested, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbtnDate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbtnStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loanType, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 846, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(91, 91, 91))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel4.setText("Search:");

        searchbar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbtnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchbar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(217, 217, 217))))
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 1092, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jbtnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(searchbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(93, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96))
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnNameActionPerformed
        // TODO add your handling code here:
         // Extracting the data from the table
        DefaultTableModel model = (DefaultTableModel) jtblTrackPayment.getModel();
        int rowCount = model.getRowCount();
        String[][] data = new String[rowCount][5];

        for (int i = 0; i < rowCount; i++) {
            data[i][0] = model.getValueAt(i, 0).toString(); // Borrower's Name
            data[i][1] = model.getValueAt(i, 1).toString(); // Amount Requested
            data[i][2] = model.getValueAt(i, 2).toString(); // Due Date
            data[i][3] = model.getValueAt(i, 3).toString(); // Status
            data[i][4] = model.getValueAt(i, 4).toString(); // Loan 
        }

        // Sort the data based on Borrower's Name using merge sort
        mergeSort(data, 0, rowCount - 1);

        // Updating the table with the sorted data
        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < 5; j++) {
                model.setValueAt(data[i][j], i, j);
            }
        }
    }//GEN-LAST:event_jbtnNameActionPerformed

    private void jbtnAmountRequestedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAmountRequestedActionPerformed
        // Extracting the data from the table
        DefaultTableModel model = (DefaultTableModel) jtblTrackPayment.getModel();
        int rowCount = model.getRowCount();
        String[][] data = new String[rowCount][5]; // Assuming 5 columns

        for (int i = 0; i < rowCount; i++) {
            data[i][0] = model.getValueAt(i, 0).toString(); // Borrower's Name
            data[i][1] = model.getValueAt(i, 1).toString(); // Amount Requested
            data[i][2] = model.getValueAt(i, 2).toString(); // Due Date
            data[i][3] = model.getValueAt(i, 3).toString(); // Status
            data[i][4] = model.getValueAt(i, 4).toString(); // Loan Type
        }

        // Sorting the data based on Amount Requested using Insertion Sort
        for (int i = 1; i < rowCount; i++) {
            String[] key = data[i];
            int j = i - 1;

            // Compare Amount Requested
            while (j >= 0 && Double.parseDouble(data[j][1]) > Double.parseDouble(key[1])) {
                data[j + 1] = data[j];
                j = j - 1;
            }
            data[j + 1] = key;
        }

        // Updating the table with the sorted data
        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < 5; j++) {
                model.setValueAt(data[i][j], i, j);
            }
        }
    }//GEN-LAST:event_jbtnAmountRequestedActionPerformed

    private void jbtnDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDateActionPerformed
        // Extracting the data from the table
        DefaultTableModel model = (DefaultTableModel) jtblTrackPayment.getModel();
        int rowCount = model.getRowCount();
        Object[][] data = new Object[rowCount][5]; // Assuming 5 columns

        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < 5; j++) {
                data[i][j] = model.getValueAt(i, j);
            }
        }

        // Sorting the data based on the date column using Arrays.sort method
        Arrays.sort(data, new Comparator<Object[]>() {
            @Override
            public int compare(Object[] row1, Object[] row2) {
                String date1 = (String) row1[2]; // Assuming date is at index 2
                String date2 = (String) row2[2]; // Assuming date is at index 2
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-mm-dd", Locale.ENGLISH);
                try {
                    return sdf.parse(date1).compareTo(sdf.parse(date2));
                } catch (ParseException ex) {
                    ex.printStackTrace();
                    return 0;
                }
            }
        });

        // Updating the table with the sorted data
        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < 5; j++) {
                model.setValueAt(data[i][j], i, j);
            }
        }
    }//GEN-LAST:event_jbtnDateActionPerformed

    Boolean unpaidFirst = false;
    private void jbtnStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnStatusActionPerformed
        // Get the table model
        DefaultTableModel model = (DefaultTableModel) jtblTrackPayment.getModel();

        // Create lists to hold rows with Unpaid and Paid statuses
        ArrayList<Object[]> unpaidRows = new ArrayList<>();
        ArrayList<Object[]> paidRows = new ArrayList<>();

        // Iterate through the table data and categorize rows by status
        for (int i = 0; i < model.getRowCount(); i++) {
            String status = (String) model.getValueAt(i, 4); // Assuming status is at index 4
            Object[] row = new Object[9]; // Assuming 5 columns
            for (int j = 0; j < 8; j++) {
                row[j] = model.getValueAt(i, j);
            }
            if (status.equals("Unpaid")) {
                unpaidRows.add(row);
            } else if (status.equals("Paid")) {
                paidRows.add(row);
            }
        }

        // Clear the table model
        model.setRowCount(0);

        // Toggle between Unpaid and Paid sorting with each click
        if (unpaidFirst) {
            // Sort and add Unpaid rows first
            for (Object[] row : unpaidRows) {
                model.addRow(row);
            }
            for (Object[] row : paidRows) {
                model.addRow(row);
            }
            unpaidFirst = false;
        } else {
            // Sort and add Paid rows first
            for (Object[] row : paidRows) {
                model.addRow(row);
            }
            for (Object[] row : unpaidRows) {
                model.addRow(row);
            }
            unpaidFirst = true;
        }
    }//GEN-LAST:event_jbtnStatusActionPerformed

    private Object[] getRowData(DefaultTableModel model, int rowIndex) {
        Object[] rowData = new Object[model.getColumnCount()];
        for (int i = 0; i < model.getColumnCount(); i++) {
            rowData[i] = model.getValueAt(rowIndex, i);
        }
        return rowData;
    }
    private void jbtnBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbtnBackMouseClicked
        AddATrack at = new AddATrack();
        dispose();
    }//GEN-LAST:event_jbtnBackMouseClicked

    private void jbtnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBackActionPerformed
        AddATrack at = new AddATrack();
        at.setVisible(rootPaneCheckingEnabled);
        dispose();
    }//GEN-LAST:event_jbtnBackActionPerformed

    private void jtblTrackPaymentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblTrackPaymentMouseClicked
        
    }//GEN-LAST:event_jtblTrackPaymentMouseClicked

    private boolean ascendingOrder = true; // Flag to track sorting order
    private String previousSortedLoanType = ""; // Track the previously sorted loan type
    
    private void loanTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loanTypeActionPerformed
        // Extracting the data from the table
        DefaultTableModel model = (DefaultTableModel) jtblTrackPayment.getModel();
        int rowCount = model.getRowCount();
        String[][] data = new String[rowCount][5]; // Assuming 5 columns

        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < 5; j++) {
                data[i][j] = model.getValueAt(i, j).toString(); // Assuming loan type is at index 4
            }
        }

        // Sorting the data based on loan type
        Arrays.sort(data, new Comparator<String[]>() {
            @Override
            public int compare(String[] row1, String[] row2) {
                String loanType1 = row1[4]; // Assuming loan type is at index 4
                String loanType2 = row2[4]; // Assuming loan type is at index 4
                if (!loanType1.equals(loanType2)) {
                    // If loan types are different, return comparison result
                    previousSortedLoanType = loanType1; // Update the previous sorted loan type
                    return ascendingOrder ? loanType1.compareTo(loanType2) : loanType2.compareTo(loanType1);
                } else {
                    // If loan types are the same, sort by previously sorted loan type
                    return previousSortedLoanType.compareTo(loanType1);
                }
            }
        });

        // Updating the table with the sorted data
        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < 5; j++) {
                model.setValueAt(data[i][j], i, j);
            }
        }

        // Toggle sorting order for next click
        ascendingOrder = !ascendingOrder;
    }//GEN-LAST:event_loanTypeActionPerformed

    private void searchbarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbarActionPerformed
      
    }//GEN-LAST:event_searchbarActionPerformed
    private void mergeSort(String[][] arr, int l, int r) {
        if (l < r) {
            int m = (l + r) / 2;
            mergeSort(arr, l, m);
            mergeSort(arr, m + 1, r);
            merge(arr, l, m, r);
        }
    }

    private void merge(String[][] arr, int l, int m, int r) {
        int n1 = m - l + 1;
        int n2 = r - m;

        String[][] L = new String[n1][4];
        String[][] R = new String[n2][4];

        for (int i = 0; i < n1; ++i) {
            L[i] = arr[l + i];
        }
        for (int j = 0; j < n2; ++j) {
            R[j] = arr[m + 1 + j];
        }

        int i = 0, j = 0;
        int k = l;
        while (i < n1 && j < n2) {
            if (L[i][0].compareTo(R[j][0]) <= 0) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }

        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TrackAPayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TrackAPayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TrackAPayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TrackAPayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TrackAPayment().setVisible(true);
            }
        });
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtnAmountRequested;
    private javax.swing.JButton jbtnBack;
    private javax.swing.JButton jbtnDate;
    private javax.swing.JButton jbtnName;
    private javax.swing.JButton jbtnStatus;
    private javax.swing.JTable jtblTrackPayment;
    private javax.swing.JButton loanType;
    private javax.swing.JTextField searchbar;
    // End of variables declaration//GEN-END:variables
}
